%% Initialization
clear ; close all; clc
%% Cargando la Data
 load('data');
 X = data(:,[1:16]);
 y = data(:,[17]);
 [X_norm,mu,sig] = featureNormalize(X);
 Xval = X_norm([1:900],:);
 yval = y([1:900],:);
 y = y([901:length(y)],:);
 X_norm = X_norm([901:length(X)],:); 
 %plotData(X,y);
%  Tamaño de la matriz
[m, n] = size(X_norm);

% Agregando una columna de 1
X_norm = [ones(m, 1) X_norm];

% % Initialize Theta con 0 
% initial_theta = zeros(n + 1, 1);
% 
% % Compute and display initial cost and gradient
% [cost, grad] = costFunction(initial_theta, X_norm, y);
% 
% fprintf('Cost at initial theta (zeros): %f\n', cost);
% fprintf('Gradient at initial theta (zeros): \n');
% fprintf(' %f \n', grad);


% %% ============= Regularizacion  =============
% % Compute and display initial cost and gradient
thetaReg = zeros(n+1,1);
[costReg, gradReg] = costFunctionReg(thetaReg, X_norm, y, 0.05);
% 
% %% =========== Train Logistic Regression =============
lambda = 0.05;
train_theta = trainLogisticReg(X_norm, y, lambda);
% 

lambda = 0.05;
[error_train, error_val] = ...
    learningCurve(X_norm, y, ...
                  [ones(size(Xval, 1), 1) Xval], yval, ...
                  lambda);
% 
plot(1:m, error_train, 1:m, error_val);
title('Learning curve for logistic regression')
legend('Train', 'Cross Validation')
xlabel('Number of training examples')
ylabel('Error')
axis([0 13 0 150])

%  In this exercise, you will use a built-in function (fminunc) to find the
%  optimal parameters theta.

%  Set options for fminunc
options = optimset('GradObj', 'on', 'MaxIter', 400);

%  Run fminunc to obtain the optimal theta
%  This function will return theta and the cost 

fprintf('Cost at theta found by fminunc: %f\n', costReg);
fprintf('theta: \n');
fprintf(' %f \n', train_theta);
[recall,precision] = calcRecallPrecision(X_norm,train_theta,y);
fprintf('recall: %f\n', recall);
fprintf(' precision:%f \n', precision);
% Hacer cambios aca para hacer predicciones
% De un nuevo cliente.
prob = sigmoid([46  7  0  2  0  668  1  0  1  15  5  1263  2  -1  0  1  1] * train_theta);
fprintf(['Probabilidad de Aceptacion de Oferta Mercadologica %f\n\n'], prob);

p = predict(theta, X_norm);

fprintf('Precisión del Train: %f\n', mean(double(p == y)) * 100);

fprintf('\nFinalizacion del Programa\n');

